---
// Theme Toggle Component
---

<button 
  id="theme-toggle" 
  class="fixed top-20 right-4 z-50 w-12 h-12 rounded-full flex items-center justify-center transition-all duration-300 shadow-lg hover:shadow-xl cursor-pointer"
  style="background: var(--glass-bg); border: 1px solid var(--glass-border); color: var(--text-primary);"
  aria-label="Cambiar tema"
>
  <!-- Sun Icon (Light Mode) -->
  <svg id="sun-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
  </svg>
  
  <!-- Moon Icon (Dark Mode) -->
  <svg id="moon-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
  </svg>
</button>

<script>
  // Enhanced Theme management
  const themeToggle = document.getElementById('theme-toggle');
  const sunIcon = document.getElementById('sun-icon');
  const moonIcon = document.getElementById('moon-icon');
  
  // Function to get system theme preference
  function getSystemTheme() {
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }
  
  // Function to get current theme (localStorage or system preference)
  function getCurrentTheme() {
    const savedTheme = localStorage.getItem('theme');
    return savedTheme || getSystemTheme();
  }
  
  // Function to set theme
  function setTheme(theme: string) {
    console.log('Setting theme to:', theme);
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    updateThemeUI(theme);
    
    // Add theme switching class to prevent flickering
    document.body.classList.add('theme-switching');
    setTimeout(() => {
      document.body.classList.remove('theme-switching');
    }, 300);
    
    // Force a repaint to ensure CSS variables are applied
    document.body.offsetHeight;
  }
  
  // Function to update UI based on theme
  function updateThemeUI(theme: string) {
    if (theme === 'light') {
      sunIcon?.classList.add('hidden');
      moonIcon?.classList.remove('hidden');
    } else {
      sunIcon?.classList.remove('hidden');
      moonIcon?.classList.add('hidden');
    }
    
    // Update toggle button styles
    const toggleButton = document.getElementById('theme-toggle');
    if (toggleButton) {
      toggleButton.style.background = 'var(--glass-bg)';
      toggleButton.style.borderColor = 'var(--glass-border)';
      toggleButton.style.color = 'var(--text-primary)';
    }
  }
  
  // Initialize theme
  const currentTheme = getCurrentTheme();
  setTheme(currentTheme);
  
  // Theme toggle functionality
  themeToggle?.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
  });
  
  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });
  
  // Add hover effects to navigation links
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('nav a');
    navLinks.forEach(link => {
      if (link instanceof HTMLElement) {
        link.addEventListener('mouseenter', () => {
          link.style.color = 'var(--color-accent-primary)';
        });
        link.addEventListener('mouseleave', () => {
          link.style.color = 'var(--color-text-secondary)';
        });
      }
    });
  });
</script>
